// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, feed_id, created_at, updated_at, title, url, description, published_at)
VALUES (
    gen_random_uuid (),
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4,
    $5
) RETURNING id, feed_id, created_at, updated_at, title, url, description, published_at
`

type CreatePostParams struct {
	FeedID      uuid.UUID
	Title       string
	Url         string
	Description string
	PublishedAt time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.FeedID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
	)
	return i, err
}

const getPostsFromUser = `-- name: GetPostsFromUser :many
WITH userposts AS (
    SELECT ff.feed_id FROM feed_follows as ff WHERE ff.user_id = $1
)
SELECT id, p.feed_id, created_at, updated_at, title, url, description, published_at, userposts.feed_id
FROM posts AS p
INNER JOIN userposts ON p.feed_id = userposts.feed_id
ORDER BY published_at DESC
LIMIT $2 OFFSET $3
`

type GetPostsFromUserParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

type GetPostsFromUserRow struct {
	ID          uuid.UUID
	FeedID      uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Url         string
	Description string
	PublishedAt time.Time
	FeedID_2    uuid.UUID
}

func (q *Queries) GetPostsFromUser(ctx context.Context, arg GetPostsFromUserParams) ([]GetPostsFromUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsFromUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsFromUserRow
	for rows.Next() {
		var i GetPostsFromUserRow
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
